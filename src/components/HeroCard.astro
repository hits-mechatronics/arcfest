---
import Link from "./Link";
---

<hero-card
  class="flex justify-center items-center h-screen w-screen js-tilt overflow-hidden"
>
  <div
    class="card flex relative flex-col items-center pt-4 pb-8 sm:py-10 px-6 sm:px-12 bg-gray-900 hover:bg-transparent hover:backdrop-filter text-cyan-500 hover:backdrop-blur-[2px] hover:border border-cyan-900 rounded-xl shadow-primary-700"
  >
    <span class="text-xs">this card follows your cursor/finger</span>
    <h1 class="text-8xl md:text-9xl font-crazy">ARC'23</h1>
    <br />
    <Link
      href="https://goo.gl/maps/N2yw9Pehu6BgnKVo7"
      linkText="Hindustan Insititue of Technology and Science"
      nonLinkText="📍: "
    />
    <Link
      href="https://calendar.google.com/calendar/event?action=TEMPLATE&tmeid=MDNiazJ1a2psMGlzYmxob2k3aDc5ZHJsZjIgbHVjaWRtYWNoQG0&tmsrc=lucidmach%40gmail.com"
      nonLinkText="📅 :"
      linkText="30th March, 2023"
    />
  </div>

  <style>
    .js-tilt {
      transform: perspective(7000px) rotateX(var(--rot-x, 0deg))
        rotateY(var(--rot-y, 0deg)) scale3d(1, 1, 1);
      transform-style: preserve-3d;
      transition: transform 600ms cubic-bezier(0.23, 1, 0.32, 1);
    }
    .js-tilt:hover {
      transition: none;
    }
    .card {
      transform: translateZ(50px);
    }
    @media screen and (min-width: 600px) {
      .js-tilt {
        transform: perspective(1000px) rotateX(var(--rot-x, 0deg))
          rotateY(var(--rot-y, 0deg)) scale3d(1, 1, 1);
      }
    }
  </style>

  <script>
    function clamp(min: number, max: number, t: number) {
      return Math.min(Math.max(t, min), max);
    }
    function lerp(v0: number, v1: number, t: number) {
      return v0 * (1 - t) + v1 * t;
    }
    class HeroCard extends HTMLElement {
      x = 0;
      y = 0;
      rect!: DOMRect;
      interval: any;
      sensitivity = 2.5;
      constructor() {
        super();
        window.addEventListener("resize", () => this.resize());
        this.addEventListener("mousemove", (e) => this.move(e.pageX, e.pageY));
        this.addEventListener("touchmove", (e) => {
          e.preventDefault();
          this.move(e.touches[0].pageX, e.touches[0].pageY);
        });
        this.addEventListener("mouseleave", (event) => {
          if ((event.target as Element).isSameNode(this)) {
            this.reset();
          }
        });
        // }
      }
      connectedCallback() {
        this.resize();
      }
      resize() {
        this.rect = this.getBoundingClientRect();
        this.reset();
      }
      move(eX: number, eY: number) {
        const x = (eX - this.rect.left) / this.rect.width - 0.5;
        const y = (eY - this.rect.top) / this.rect.height - 0.5;
        const nx = 5;
        const ny = 7.5;
        const horiztonal = clamp(nx * -1, nx, lerp(nx * -1, nx, x * 2));
        const vertical = clamp(ny * -1, ny, lerp(ny, ny * -1, y * 2));
        requestAnimationFrame(() => {
          this.style.setProperty(
            "--rot-x",
            `${vertical * this.sensitivity}deg`
          );
          this.style.setProperty(
            "--rot-y",
            `${horiztonal * this.sensitivity}deg`
          );
        });
      }
      reset() {
        requestAnimationFrame(() => {
          this.style.setProperty("--rot-x", `0deg`);
          this.style.setProperty("--rot-y", `0deg`);
        });
      }
    }
    customElements.define("hero-card", HeroCard);
  </script>
</hero-card>
