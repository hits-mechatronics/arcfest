<hero-card
  class="mt-16 mb-8 lg:mt-0 lg:mb-0 px-2 sm:px-6 sm:text-center lg:px-64 lg:-mx-64 lg:text-left lg:flex col-span-6 justify-center items-center"
>
  <div class="mx-auto max-w-sm sm:max-w-xl">
    <div class="relative js-tilt">
      <div class="grid-lines -z-10">
        <div class="right-1/4 vertical"></div>
        <div class="right-1/2 vertical"></div>
        <div class="right-3/4 vertical"></div>
        <div class="top-1/2 horizontal"></div>
        <div class="right-0 vertical"></div>
        <div class="bottom-0 horizontal"></div>
        <div class="left-0 vertical"></div>
        <div class="top-0 horizontal"></div>
        <div class="-right-[25%] vertical outer"></div>
        <div class="-left-[25%] vertical outer"></div>
      </div>

      <div
        class="card flex relative flex-col items-center pt-4 pb-8 sm:py-10 px-6 sm:px-12 backdrop-filter text-cyan-500 backdrop-blur-[2px] border border-cyan-400 rounded-2xl shadow-primary-700"
      >
        <h1 class="text-9xl font-crazy">ARC'23</h1>
        <br />
        <h3 class="text-sm">
          📍: Hindustan Insititue of Technology and Science
        </h3>
        <h3 class="text-sm">📅 : 30th March, 2023</h3>
      </div>
    </div>
  </div>
</hero-card>

<style>
  .js-tilt {
    transform: perspective(1000px) rotateX(var(--rot-x, 0deg))
      rotateY(var(--rot-y, 0deg)) scale3d(1, 1, 1);
    transform-style: preserve-3d;
    transition: transform 600ms cubic-bezier(0.23, 1, 0.32, 1);
  }
  .js-tilt:hover {
    transition: none;
  }
  .card {
    transform: translateZ(50px);
  }
  .grid-lines > div {
    @apply absolute from-cyan-400/0 via-cyan-400 to-cyan-400/0;
  }
  .grid-lines > .vertical {
    @apply w-px -top-1/2 h-[200%] bg-gradient-to-b;
  }
  .grid-lines > .horizontal {
    @apply h-px -left-1/2 w-[200%] bg-gradient-to-r;
  }
  .grid-lines > .outer {
    @apply via-cyan-400/50;
  }
</style>

<script>
  function clamp(min: number, max: number, t: number) {
    return Math.min(Math.max(t, min), max);
  }
  function lerp(v0: number, v1: number, t: number) {
    return v0 * (1 - t) + v1 * t;
  }
  class HeroCard extends HTMLElement {
    x = 0;
    y = 0;
    rect!: DOMRect;
    interval: any;
    constructor() {
      super();
      if (!("matchMedia" in window)) return;
      const motionSafe = window.matchMedia(
        "(prefers-reduced-motion: no-preference)"
      ).matches;
      const canHover = window.matchMedia("(hover: hover)").matches;
      if (motionSafe && canHover) {
        window.addEventListener("resize", () => this.resize());
        this.addEventListener("mousemove", (event) =>
          this.move(event as MouseEvent)
        );
        this.addEventListener("mouseleave", (event) => {
          if ((event.target as Element).isSameNode(this)) {
            this.reset();
          }
        });
      }
    }
    connectedCallback() {
      this.resize();
    }
    resize() {
      this.rect = this.getBoundingClientRect();
      this.reset();
    }
    move(e: MouseEvent) {
      const x = (e.pageX - this.rect.left) / this.rect.width - 0.5;
      const y = (e.pageY - this.rect.top) / this.rect.height - 0.5;
      const nx = 5;
      const ny = 7.5;
      const horiztonal = clamp(nx * -1, nx, lerp(nx * -1, nx, x * 2));
      const vertical = clamp(ny * -1, ny, lerp(ny, ny * -1, y * 2));
      requestAnimationFrame(() => {
        this.style.setProperty("--rot-x", `${vertical}deg`);
        this.style.setProperty("--rot-y", `${horiztonal}deg`);
      });
    }
    reset() {
      requestAnimationFrame(() => {
        this.style.setProperty("--rot-x", `0deg`);
        this.style.setProperty("--rot-y", `0deg`);
      });
    }
  }
  customElements.define("hero-card", HeroCard);
</script>
