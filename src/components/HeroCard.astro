<hero-card class="flex justify-center items-center h-screen w-screen js-tilt">
  <div
    class="card flex relative flex-col items-center pt-4 pb-8 sm:py-10 px-6 sm:px-12 backdrop-filter text-cyan-500 backdrop-blur-[2px] border border-cyan-400 rounded-2xl shadow-primary-700"
  >
    <h1 class="text-8xl md:text-9xl font-crazy">ARC'23</h1>
    <br />
    <a
      class="text-[0.8rem] md:text-sm underline"
      href="https://goo.gl/maps/N2yw9Pehu6BgnKVo7"
      target="_blank"
    >
      📍: Hindustan Insititue of Technology and Science
    </a>
    <a
      class="text-[0.8rem] md:text-sm underline"
      href="https://calendar.google.com/calendar/event?action=TEMPLATE&tmeid=MDNiazJ1a2psMGlzYmxob2k3aDc5ZHJsZjIgbHVjaWRtYWNoQG0&tmsrc=lucidmach%40gmail.com"
      target="_blank">📅 : 30th March, 2023</a
    >
  </div>
</hero-card>

<style>
  .js-tilt {
    transform: perspective(1000px) rotateX(var(--rot-x, 0deg))
      rotateY(var(--rot-y, 0deg)) scale3d(1, 1, 1);
    transform-style: preserve-3d;
    transition: transform 600ms cubic-bezier(0.23, 1, 0.32, 1);
  }
  .js-tilt:hover {
    transition: none;
  }
  .card {
    transform: translateZ(50px);
  }
</style>

<script>
  function clamp(min: number, max: number, t: number) {
    return Math.min(Math.max(t, min), max);
  }
  function lerp(v0: number, v1: number, t: number) {
    return v0 * (1 - t) + v1 * t;
  }
  class HeroCard extends HTMLElement {
    x = 0;
    y = 0;
    rect!: DOMRect;
    interval: any;
    constructor() {
      super();
      if (!("matchMedia" in window)) return;
      const motionSafe = window.matchMedia(
        "(prefers-reduced-motion: no-preference)"
      ).matches;
      const canHover = window.matchMedia("(hover: hover)").matches;
      if (motionSafe && canHover) {
        window.addEventListener("resize", () => this.resize());
        this.addEventListener("mousemove", (e) => this.move(e.pageX, e.pageY));
        this.addEventListener("mouseleave", (event) => {
          if ((event.target as Element).isSameNode(this)) {
            this.reset();
          }
        });
      }
    }
    connectedCallback() {
      this.resize();
    }
    resize() {
      this.rect = this.getBoundingClientRect();
      this.reset();
    }
    move(eX: number, eY: number) {
      const x = (eX - this.rect.left) / this.rect.width - 0.5;
      const y = (eY - this.rect.top) / this.rect.height - 0.5;
      const nx = 5;
      const ny = 7.5;
      const horiztonal = clamp(nx * -1, nx, lerp(nx * -1, nx, x * 2));
      const vertical = clamp(ny * -1, ny, lerp(ny, ny * -1, y * 2));
      requestAnimationFrame(() => {
        this.style.setProperty("--rot-x", `${vertical}deg`);
        this.style.setProperty("--rot-y", `${horiztonal}deg`);
      });
    }
    reset() {
      requestAnimationFrame(() => {
        this.style.setProperty("--rot-x", `0deg`);
        this.style.setProperty("--rot-y", `0deg`);
      });
    }
  }
  customElements.define("hero-card", HeroCard);
</script>
